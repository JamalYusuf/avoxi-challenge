// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: v1.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{0}
}

func (x *Country) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type GeoIPCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP               string     `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	AllowedCountries []*Country `protobuf:"bytes,2,rep,name=AllowedCountries,proto3" json:"AllowedCountries,omitempty"`
}

func (x *GeoIPCheckRequest) Reset() {
	*x = GeoIPCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIPCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIPCheckRequest) ProtoMessage() {}

func (x *GeoIPCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIPCheckRequest.ProtoReflect.Descriptor instead.
func (*GeoIPCheckRequest) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{1}
}

func (x *GeoIPCheckRequest) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *GeoIPCheckRequest) GetAllowedCountries() []*Country {
	if x != nil {
		return x.AllowedCountries
	}
	return nil
}

type GeoIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GeoIPResponse) Reset() {
	*x = GeoIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIPResponse) ProtoMessage() {}

func (x *GeoIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIPResponse.ProtoReflect.Descriptor instead.
func (*GeoIPResponse) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{2}
}

func (x *GeoIPResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GeoIPResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type IPLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *IPLocationRequest) Reset() {
	*x = IPLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPLocationRequest) ProtoMessage() {}

func (x *IPLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPLocationRequest.ProtoReflect.Descriptor instead.
func (*IPLocationRequest) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{3}
}

func (x *IPLocationRequest) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type IPLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP       string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=Location,proto3" json:"Location,omitempty"`
}

func (x *IPLocationResponse) Reset() {
	*x = IPLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPLocationResponse) ProtoMessage() {}

func (x *IPLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPLocationResponse.ProtoReflect.Descriptor instead.
func (*IPLocationResponse) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{4}
}

func (x *IPLocationResponse) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *IPLocationResponse) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{5}
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{6}
}

func (x *HealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_v1_proto protoreflect.FileDescriptor

var file_v1_proto_rawDesc = []byte{
	0x0a, 0x08, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x07,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x37, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x23, 0x0a, 0x11, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0x40, 0x0a, 0x12, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0xba, 0x05, 0x0a, 0x0f, 0x49, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x49, 0x50,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x50,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0xb5, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x30, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x50, 0x20, 0x69, 0x73,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x1a, 0x75, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x50, 0x20,
	0x74, 0x6f, 0x20, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x20, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x53,
	0x4f, 0x33, 0x31, 0x36, 0x36, 0x2d, 0x31, 0x2c, 0x20, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x2d, 0x32,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x12, 0xbb, 0x01, 0x0a, 0x0a, 0x49, 0x50, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x5e, 0x0a, 0x0a, 0x49, 0x50, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x50, 0x2e, 0x1a, 0x2b, 0x47, 0x65, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x12, 0xd6, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x87, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x34, 0x47, 0x65, 0x74, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x1a, 0x47, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2c, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x2c, 0x20, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x42,
	0xa9, 0x02, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
	0x61, 0x6d, 0x61, 0x6c, 0x79, 0x75, 0x73, 0x75, 0x66, 0x2f, 0x61, 0x76, 0x6f, 0x78, 0x69, 0x2d,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x76, 0x31, 0x92, 0x41, 0xf5, 0x01, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x02,
	0x72, 0xe8, 0x01, 0x0a, 0xb6, 0x01, 0x67, 0x52, 0x50, 0x43, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2d, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x20, 0x41, 0x50, 0x49, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x77, 0x68, 0x69, 0x74, 0x65, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x20, 0x54, 0x68, 0x65, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x69, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x12, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6a, 0x61, 0x6d, 0x61, 0x6c, 0x79, 0x75, 0x73, 0x75, 0x66, 0x2f, 0x61, 0x76, 0x6f, 0x78,
	0x69, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_v1_proto_rawDescOnce sync.Once
	file_v1_proto_rawDescData = file_v1_proto_rawDesc
)

func file_v1_proto_rawDescGZIP() []byte {
	file_v1_proto_rawDescOnce.Do(func() {
		file_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_proto_rawDescData)
	})
	return file_v1_proto_rawDescData
}

var file_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_v1_proto_goTypes = []interface{}{
	(*Country)(nil),            // 0: v1.Country
	(*GeoIPCheckRequest)(nil),  // 1: v1.GeoIPCheckRequest
	(*GeoIPResponse)(nil),      // 2: v1.GeoIPResponse
	(*IPLocationRequest)(nil),  // 3: v1.IPLocationRequest
	(*IPLocationResponse)(nil), // 4: v1.IPLocationResponse
	(*HealthRequest)(nil),      // 5: v1.HealthRequest
	(*HealthResponse)(nil),     // 6: v1.HealthResponse
}
var file_v1_proto_depIdxs = []int32{
	0, // 0: v1.GeoIPCheckRequest.AllowedCountries:type_name -> v1.Country
	1, // 1: v1.IPFilterService.GeoIPCheck:input_type -> v1.GeoIPCheckRequest
	3, // 2: v1.IPFilterService.IPLocation:input_type -> v1.IPLocationRequest
	5, // 3: v1.IPFilterService.Health:input_type -> v1.HealthRequest
	2, // 4: v1.IPFilterService.GeoIPCheck:output_type -> v1.GeoIPResponse
	4, // 5: v1.IPFilterService.IPLocation:output_type -> v1.IPLocationResponse
	6, // 6: v1.IPFilterService.Health:output_type -> v1.HealthResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_v1_proto_init() }
func file_v1_proto_init() {
	if File_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIPCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_proto_goTypes,
		DependencyIndexes: file_v1_proto_depIdxs,
		MessageInfos:      file_v1_proto_msgTypes,
	}.Build()
	File_v1_proto = out.File
	file_v1_proto_rawDesc = nil
	file_v1_proto_goTypes = nil
	file_v1_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IPFilterServiceClient is the client API for IPFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPFilterServiceClient interface {
	GeoIPCheck(ctx context.Context, in *GeoIPCheckRequest, opts ...grpc.CallOption) (*GeoIPResponse, error)
	IPLocation(ctx context.Context, in *IPLocationRequest, opts ...grpc.CallOption) (*IPLocationResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type iPFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPFilterServiceClient(cc grpc.ClientConnInterface) IPFilterServiceClient {
	return &iPFilterServiceClient{cc}
}

func (c *iPFilterServiceClient) GeoIPCheck(ctx context.Context, in *GeoIPCheckRequest, opts ...grpc.CallOption) (*GeoIPResponse, error) {
	out := new(GeoIPResponse)
	err := c.cc.Invoke(ctx, "/v1.IPFilterService/GeoIPCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPFilterServiceClient) IPLocation(ctx context.Context, in *IPLocationRequest, opts ...grpc.CallOption) (*IPLocationResponse, error) {
	out := new(IPLocationResponse)
	err := c.cc.Invoke(ctx, "/v1.IPFilterService/IPLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPFilterServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/v1.IPFilterService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPFilterServiceServer is the server API for IPFilterService service.
type IPFilterServiceServer interface {
	GeoIPCheck(context.Context, *GeoIPCheckRequest) (*GeoIPResponse, error)
	IPLocation(context.Context, *IPLocationRequest) (*IPLocationResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
}

// UnimplementedIPFilterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIPFilterServiceServer struct {
}

func (*UnimplementedIPFilterServiceServer) GeoIPCheck(context.Context, *GeoIPCheckRequest) (*GeoIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoIPCheck not implemented")
}
func (*UnimplementedIPFilterServiceServer) IPLocation(context.Context, *IPLocationRequest) (*IPLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPLocation not implemented")
}
func (*UnimplementedIPFilterServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}

func RegisterIPFilterServiceServer(s *grpc.Server, srv IPFilterServiceServer) {
	s.RegisterService(&_IPFilterService_serviceDesc, srv)
}

func _IPFilterService_GeoIPCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoIPCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFilterServiceServer).GeoIPCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPFilterService/GeoIPCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFilterServiceServer).GeoIPCheck(ctx, req.(*GeoIPCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPFilterService_IPLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFilterServiceServer).IPLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPFilterService/IPLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFilterServiceServer).IPLocation(ctx, req.(*IPLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPFilterService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFilterServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IPFilterService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFilterServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPFilterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.IPFilterService",
	HandlerType: (*IPFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeoIPCheck",
			Handler:    _IPFilterService_GeoIPCheck_Handler,
		},
		{
			MethodName: "IPLocation",
			Handler:    _IPFilterService_IPLocation_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _IPFilterService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1.proto",
}
